name: "MCaffeNet"

# input
layer {
  name: "data_msc"
  type: "ImageData"
  top: "data_msc"
  top: "label_msc"
  include {
    phase: TRAIN
  }
  image_data_param {
    source: "/media/p307k07/ssd/opt/msc/data/train/list_caffe.txt"
    batch_size: 50
    new_height: 159
    new_width: 240
  }
  transform_param {
    # mirror: false
    # crop_size: 227
    # mean_file: "/home/p307k07/Code/MSc/MSc/data/train/mean.binaryproto"
    mean_value: 296 # B
    mean_value: 103 # G
    mean_value: 108 # R
  }
}
layer {
  name: "data_msc"
  type: "ImageData"
  top: "data_msc"
  top: "label_msc"
  include {
    phase: TEST
  }
  image_data_param {
    source: "/media/p307k07/ssd/opt/msc/data/test/list_caffe.txt"
    batch_size: 50
    new_height: 159
    new_width: 240
  }
  transform_param {
    # mirror: false
    # crop_size: 227
    # mean_file: "/home/p307k07/Code/MSc/MSc/data/test/mean.binaryproto"
    mean_value: 296 # B
    mean_value: 103 # G
    mean_value: 108 # R
  }
}

# convolutions
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data_msc"
  top: "conv1"
  param {
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

# fully connected layers
layer {
  name: "fc6_msc"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6_msc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6_msc"
  top: "fc6_msc"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6_msc"
  top: "fc6_msc"
  dropout_param {
    dropout_ratio: 0.6
  }
}
layer {
  name: "fc7_msc"
  type: "InnerProduct"
  bottom: "fc6_msc"
  top: "fc7_msc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7_msc"
  top: "fc7_msc"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7_msc"
  top: "fc7_msc"
  dropout_param {
    dropout_ratio: 0.6
  }
}
layer {
  name: "fc8_msc"
  type: "InnerProduct"
  bottom: "fc7_msc"
  top: "fc8_msc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

# evaluation and loss
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8_msc"
  bottom: "label_msc"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss_msc"
  type: "SoftmaxWithLoss"
  bottom: "fc8_msc"
  bottom: "label_msc"
  top: "loss"
}
